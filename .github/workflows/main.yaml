name: mainWorkflow
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  simpleJob:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # execute command on the runner
    - run: echo 'Hello GitHub Actions'
    - run: print('Hello Python!')
      shell: python

    # execute a shell script on the runner
    # NOTE You have to use `actions/checkout@v2` before.
    # NOTE Do not forget to add execute permission on the scripts.
    - run: ./.github/scripts/helloworld.sh

    # docker container action
    - uses: docker://alpine:latest
      with:
        entrypoint: echo
        args: Hello alpine!

  # upload and download artifact
  artifactUploadJob:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # NOTE
    # If the action is executed in the runner machine (not in container),
    # ${{ runner.temp }} is useful directory to put temporary files in.
    - uses: docker://pandoc/minimal:latest
      with:
        args: README.md -o README.html
    - uses: actions/upload-artifact@v3
      with:
        name: html
        path: README.html
  artifactDownloadJob:
    runs-on: ubuntu-latest
    needs: artifactUploadJob
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: html
    # the downloaded file is located in $GITHUB_WORKSPACE
    - run: cat README.html

  # expressions
  expressionJob:
    # comparison
    runs-on: ubuntu-latest
    steps:
    - run: echo 'GitHub ignores case'
      if: ${{ 'String' == 'string' }}
    - run: echo 'GitHub casts data types to a number'
      if: ${{ 0 == false }}

  # contexts
  contextsJob:
    runs-on: ubuntu-latest
    steps:
    - run: echo 'You can access context information using these syntaxes'
      if: ${{ github['sha'] == github.sha }}

    # NOTE env.VALUE is string (not bool)
    - run: echo 'This step is NOT executed (0 != 1)'
      if: ${{ 'true' == fromJSON(env.VALUE) }}
      env:
        VALUE: true
    - run: echo 'This step is executed ("true" == "true")'
      if: ${{ 'true' == env.VALUE }}
      env:
        VALUE: true

  # environment variable
  environmentVariableJob:
    env:
      FOO: foo
    runs-on: ubuntu-latest
    steps:
    - run: env
    - run: echo $FOO
    - run: echo $FOO
      env:
        FOO: foooo
    - run: echo "BAR=bar" >> $GITHUB_ENV
    - run: echo $BAR

  # outputs
  outputDefineJob:
    runs-on: ubuntu-latest
    outputs:
      variable: ${{ steps.step1.outputs.variable }}
    steps:
    - id: step1
      run: echo "::set-output name=variable::foo"
  outputAccessJob:
    runs-on: ubuntu-latest
    needs: outputDefineJob
    steps:
    - run: echo ${{ needs.outputDefineJob.outputs.variable }}

  # workflow commands
  workflowCommandJob:
    runs-on: ubuntu-latest
    steps:
    - id: set
      run: echo '::set-output name=VALUE::foo'
    - run: echo ${{ steps.set.outputs.VALUE }}
    # Optionaly you can specify a position
    # https://github.com/dr666m1/recipe-github-actions/commit/c32aad6525f89d97ccfb8488816af74fd252982e#annotation_3074059734
    - run: echo "::notice::message"

  containerJob:
    container:
      image: debian:latest
    runs-on: ubuntu-latest
    steps:
    - run: cat /etc/debian_version
    # NOTE
    # If git is not in your PATH,
    # the repository will be downloaded using the GitHub REST API.
    - uses: actions/checkout@v2
    - run: cat ./README.md

  subWorkflowJob1:
    uses: ./.github/workflows/sub.yaml
    with:
      message: Hello from mainWorkflow!
  subWorkflowJob2:
    runs-on: ubuntu-latest
    needs: subWorkflowJob1
    steps:
    - run: echo ${{ needs.subWorkflowJob1.outputs.greet }}

  secretJob:
    runs-on: ubuntu-latest
    env:
      PASSWORD: ${{ secrets.PASSWORD }}
    steps:
    # logged as ***
    - run: echo $PASSWORD

  cacheJob:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '16'
    # NOTE
    # Actually, you do not have to use actions/cache
    # because actions/setup-node supports caching packages dependencies.
    - uses: actions/cache@v2
      id: cache
      with:
        key: hashFiles('**/package-lock.json')
        # See https://docs.npmjs.com/cli/v8/commands/npm-cache
        path: ~/.npm
    - run: echo "Cache Hit!"
      if: ${{ steps.cache.outputs.cache-hit }}
    - run: npm install
    - run: npm test

  matrixJob:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        greet: [Hello, Hi]
        name: [Alice, Bob]
        exclude:
        - greet: Hello
          name: Bob
        include:
        - greet: Hey
          name: Carol
    steps:
    - run: echo '${{ matrix.greet }} ${{ matrix.name }}.'

  protectedJob:
    # You can configure protection rules.
    # Settings > Environements > production
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://example.com
    steps:
    - run: echo 'environementJob'

  oidcJob:
    # # prerequisite
    # * create service account
    # * add permisson of `roles/logging.logWriter`
    # * enable IAM Service Account Credentials API
    # * create workload identity pool and provider (use default audience)
    # * connect workload identity pool to service account
    # * add secrets to GitHub repository
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
    - uses: actions/checkout@v3
    - id: auth
      uses: google-github-actions/auth@v0
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}
    # Google Cloud SDK is pre-installed
    - run: gcloud logging write recipe-github-actions 'Hello from GitHub Actions!'

  serviceJob:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
    steps:
    - uses: docker://redis:latest
      with:
        entrypoint: redis-cli
        args: -h redis set foo bar
    - uses: docker://redis:latest
      with:
        entrypoint: redis-cli
        args: -h redis get foo

  myActionJob:
    runs-on: ubuntu-latest
    steps:
      uses: ./.github/actions/docker
      id: docker
      with:
        what-to-say: "I'm a unicorn!"
      uses: ./.github/actions/docker
      id: docker default
